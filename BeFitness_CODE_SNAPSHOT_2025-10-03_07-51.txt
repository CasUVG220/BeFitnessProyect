# BeFitness – Snapshot de estructura y código

## Árbol de proyecto

.
├── .git
│   ├── COMMIT_EDITMSG
│   ├── HEAD
│   ├── config
│   ├── description
│   ├── hooks
│   │   ├── applypatch-msg.sample
│   │   ├── commit-msg.sample
│   │   ├── fsmonitor-watchman.sample
│   │   ├── post-update.sample
│   │   ├── pre-applypatch.sample
│   │   ├── pre-commit.sample
│   │   ├── pre-merge-commit.sample
│   │   ├── pre-push.sample
│   │   ├── pre-rebase.sample
│   │   ├── pre-receive.sample
│   │   ├── prepare-commit-msg.sample
│   │   ├── push-to-checkout.sample
│   │   ├── sendemail-validate.sample
│   │   └── update.sample
│   ├── index
│   ├── info
│   │   └── exclude
│   ├── logs
│   │   ├── HEAD
│   │   └── refs
│   │       ├── heads
│   │       │   └── main
│   │       └── remotes
│   │           └── origin
│   │               └── main
│   ├── objects
│   │   ├── 02
│   │   │   └── 2f6b54e8f818d174d33f2595d7aba6d7fbfa96
│   │   ├── 03
│   │   │   └── ddbd07ae471a59f7177d36ae3231b9645190f9
│   │   ├── 05
│   │   │   └── b7c6cbeb590cf09d57e938c0891b437355e716
│   │   ├── 06
│   │   │   └── b315b10e2aff8c0a6b15baa2ab9b01b4af454e
│   │   ├── 07
│   │   │   ├── 615786dd22a6c2df1ebd0b3a53fcd204d49d6c
│   │   │   └── d5da9cbf141911847041df5d7b87f0dd5ef9d4
│   │   ├── 0a
│   │   │   └── d55fa7ee2f5e6750026161aa67a1185092ae3e
│   │   ├── 0e
│   │   │   └── b451f02029bb9f5782226e0dbb04f824d620f8
│   │   ├── 10
│   │   │   └── 7acd32c4e687021ef32db511e8a206129b88ec
│   │   ├── 11
│   │   │   └── 65178159f19a071a8c4a077cd21aff73b8c4ec
│   │   ├── 12
│   │   │   └── 17e928894cecf247fd980964e5e9f7fad16e4e
│   │   ├── 14
│   │   │   └── fe64b06abf5fd5f5a4a1ff2b55acad64df0c7d
│   │   ├── 17
│   │   │   └── 27bebbd11adbdd789dc387d8bf944dbb594e1a
│   │   ├── 1b
│   │   │   └── 9a6956b3acdc11f40ce2bb3f6efbd845cc243f
│   │   ├── 22
│   │   │   └── 5aa548e80139eefbabde4504571b92dd2b9abb
│   │   ├── 24
│   │   │   └── adbd5761a91aa421563c21e1225fb169d933c0
│   │   ├── 26
│   │   │   └── 64ac0f890cc353948ceddd9ee8a82094b31373
│   │   ├── 28
│   │   │   ├── d4b77f9f036a47549d47db79c16788749dca10
│   │   │   └── ec1da2e6c6d4c32bb164a30ea13f3982a79c99
│   │   ├── 2b
│   │   │   └── 068d11462a4b96669193de13a711a3a36220a0
│   │   ├── 2f
│   │   │   └── 4294b3f578b70a61caf19bd2e79d00d19923bb
│   │   ├── 31
│   │   │   └── 46f2ce90bc8c998ab33b4c1af5290261bc0ef6
│   │   ├── 33
│   │   │   └── b2362c36b59595020f5eb692e7d7d8630a0779
│   │   ├── 3d
│   │   │   └── 9d27258f2819b552d3e9c6e2bc8a319aabebbc
│   │   ├── 41
│   │   │   └── 378b6471f7593211131e336b017a9ced578be3
│   │   ├── 42
│   │   │   └── 022c214b8c47a5d5f9774197529f763d5716a0
│   │   ├── 46
│   │   │   └── 123c8a05f7c8ae0d069692786b4f3b1a0648d7
│   │   ├── 48
│   │   │   └── 1bb434814107eb79d7a30b676d344b0df2f8ce
│   │   ├── 4a
│   │   │   └── da27e7070eb69ac33fe51cbb412bf9c51db16b
│   │   ├── 4d
│   │   │   ├── 8bd0262c16c51fc5bbadb6bdaf00625ba67cb1
│   │   │   ├── dbfd92485ac6ea71448ba9f80fc3a2581aec7f
│   │   │   └── f925582478cf0d469c4cff9a4bb50859f3230a
│   │   ├── 4f
│   │   │   ├── 0f1d64e58ba64d180ce43ee13bf9a17835fbca
│   │   │   └── 906e0c811fc9e230eb44819f509cd0627f2600
│   │   ├── 51
│   │   │   └── 6abe05699b4a4d708524ba0d8a6ebbd734ec1a
│   │   ├── 56
│   │   │   └── 92e7e31d44297bf12c993c22fcd31d959587d0
│   │   ├── 58
│   │   │   └── 4c409b3db17e59baf0a43bb44424899f28790c
│   │   ├── 5c
│   │   │   └── 016a9aa8632a879854d7c214f8729f38d72467
│   │   ├── 62
│   │   │   └── b611da081676d42f6c3f78a2c91e7bcedddedb
│   │   ├── 65
│   │   │   └── 59cf9487731dc566ad67ad35c65fa8c4429af8
│   │   ├── 66
│   │   │   └── 4c7eaae11c47df7a373c07de1ed556c3b8fb3d
│   │   ├── 69
│   │   │   ├── ace0b0e1d648d8e03affb7d4f0a2dde94d5dc0
│   │   │   └── bd022d93b6d84f4ca57794c04ccc2720a77a71
│   │   ├── 6c
│   │   │   └── adb235f691d2c65ba83f2ef5161a9387e4a1e9
│   │   ├── 6f
│   │   │   └── 3b755bf50c6b03d8714a9c6184705e6a08389f
│   │   ├── 71
│   │   │   └── 9eb9405fddc702c2bfee4969d119dc6258d06f
│   │   ├── 73
│   │   │   └── 42ff067e16a856759e4608ee88c5c82e7b79a8
│   │   ├── 78
│   │   │   └── d7f76ed78d15a003b7ba61b130f9bebe8345e0
│   │   ├── 7c
│   │   │   └── 262462995e07d753e232ff3b19a20c3f5657f4
│   │   ├── 83
│   │   │   └── 0165c59dd453aa1830766d7cf2691fb1723460
│   │   ├── 85
│   │   │   └── df660d281d7d414362e0a75e2665d8155bb546
│   │   ├── 89
│   │   │   └── b1da693b3c207cc482bcb74d9937e0d8a30f5c
│   │   ├── 8a
│   │   │   └── 31f4c07548ba783b4c48a62df22dce04f02447
│   │   ├── 8f
│   │   │   └── 952c3889f9e713281671033dd73deb250844ea
│   │   ├── 90
│   │   │   └── 7733e1dae9e6ea642b5a1d93aae9ed8374cf54
│   │   ├── 91
│   │   │   ├── 26ae37cbc3587421d6889eadd1d91fbf1994d4
│   │   │   └── 3e40bbf66ab62297cbe83650867f4609d0b6ce
│   │   ├── 92
│   │   │   ├── 7a0386feaa0fb291dc58aed5afe9222791f482
│   │   │   └── 87f5083623b375139afb391af71cc533a7dd37
│   │   ├── 93
│   │   │   └── a22fe1f0bcc1310f8d1ab297e6ac2d378aa921
│   │   ├── 94
│   │   │   ├── 8a3070fe34c611c42c0d3ad3013a0dce358be0
│   │   │   ├── 8c19c6195076af249279c7f1ec96bf57f5822a
│   │   │   └── a61464165b7d2294e7afd981486a77305b137e
│   │   ├── 96
│   │   │   ├── 64ee222db929cfd46ec5bef4b750b134104972
│   │   │   └── cfd5d24c54f458015d6d99603ed3d31255f845
│   │   ├── 9e
│   │   │   └── e9997b0b4726e57c27b2f7b21462b604ff8a88
│   │   ├── a0
│   │   │   └── 5db833f69f60dbfd026df6b619a9d86b441b42
│   │   ├── a1
│   │   │   └── fd5241f2d860a4137d704444338072e0f85bb8
│   │   ├── a3
│   │   │   └── de34961096076e3ad578310142d8e33859d1bb
│   │   ├── a9
│   │   │   └── fb89a655a842003ee3ce2aed079a2c19effd82
│   │   ├── aa
│   │   │   └── 7d6427e6fa1074b79ccd52ef67ac15c5637e85
│   │   ├── ab
│   │   │   └── a43ae2e19cb3624fdaf1b26a36547ee35dd1ce
│   │   ├── af
│   │   │   └── 0d0404ae72e37ba388441400e3713eb4fc919c
│   │   ├── b2
│   │   │   └── dfe3d1ba5cf3ee31b3ecc1ced89044a1f3b7a9
│   │   ├── b3
│   │   │   └── 005827d58984b9f50c7ffdce3ffef028ca6186
│   │   ├── b5
│   │   │   └── 0f5199a2307f4e05029714f0d412f8016ce39b
│   │   ├── b7
│   │   │   ├── 3e3eabe04856701b3043437a764c780b005138
│   │   │   └── 61200b927ad7efe7f61ff3ce0ba943a4681fd4
│   │   ├── ba
│   │   │   └── 452afd4c93ceb51f693ca10cc1195d35a39e2c
│   │   ├── bd
│   │   │   └── 0bd2b80a8d48a6c9aa32d2088c5948bd13c954
│   │   ├── c0
│   │   │   └── 33b6b2e70a2d6993c415f583601bc6745f63fb
│   │   ├── c1
│   │   │   └── f0499bcbc6a80fafa4e12c17686b596f1bb245
│   │   ├── c2
│   │   │   └── 09e78ecd372343283f4157dcfd918ec5165bb3
│   │   ├── c3
│   │   │   └── 8e24275fb1bebdccc56610ec649ad5949ab5ef
│   │   ├── c5
│   │   │   ├── 464054e2460e1e4f497934c6dec0002bacae21
│   │   │   └── 99dd66f28e3b9ebc452bf6264dfd4f0bf6b768
│   │   ├── c6
│   │   │   └── 301642134d30377ad49df9b1e85ef8378821a9
│   │   ├── d9
│   │   │   └── 600064fcf5baca51074007d1d0770c67fed1d9
│   │   ├── dc
│   │   │   └── f7158ff164871bde82c1ad1fe82cbc66361a9c
│   │   ├── dd
│   │   │   └── ed831258057be33a261f5b76bd19a6111a9563
│   │   ├── e1
│   │   │   └── b4ed71dc2c348e9ccec6dc6891c605093b44b4
│   │   ├── e4
│   │   │   └── 0e30133253a5277ef3b657db440d618cd65ec6
│   │   ├── e5
│   │   │   └── 06175586c0a7073740bbce1125f71154514d4d
│   │   ├── e6
│   │   │   ├── 25e37ce3662689af6360b0fb634ce762a636b1
│   │   │   └── 9de29bb2d1d6434b8b29ae775ad8c2e48c5391
│   │   ├── e7
│   │   │   ├── 08b1c023ec8b20f512888fe07c5bd3ff77bb8f
│   │   │   └── c82b7d86aae76ab3072ac628a40b67a79411da
│   │   ├── e9
│   │   │   ├── 343f5f1d9c85d46249df937b7b229f07bfd758
│   │   │   ├── 7d94c031cde35dca36b21653b9a00352c6702b
│   │   │   └── d6d82b5e8c3134ebc8075ef7fd9316145c5d90
│   │   ├── ec
│   │   │   └── 92a9534be38877d98d8fc3c268353bb020779b
│   │   ├── ee
│   │   │   └── ee2276f307abc9cfc20d0199876db891d08f8e
│   │   ├── f3
│   │   │   └── b29cc0fa89076f9456c69042ac5f670c387151
│   │   ├── f8
│   │   │   └── c6127d327620c93d2b2d00342a68e97b98a48d
│   │   ├── fa
│   │   │   └── 643e3718a6fa93fb6724ea4fb5f8a0a40901ab
│   │   ├── fb
│   │   │   └── 6cdb987c32e13ccac2c2d79f4473c2f15f178c
│   │   ├── fd
│   │   │   └── ce63cae50eadc4148a6175904360d7c55701de
│   │   ├── info
│   │   └── pack
│   └── refs
│       ├── heads
│       │   └── main
│       ├── remotes
│       │   └── origin
│       │       └── main
│       └── tags
├── .gitignore
├── .kotlin
│   └── sessions
├── BeFitness_CODE_SNAPSHOT_2025-10-03_07-51.txt
├── BeFitness_FULL_2025-09-30_22-27.tar.gz
├── app
│   ├── .gitignore
│   ├── build.gradle.kts
│   ├── proguard-rules.pro
│   └── src
│       ├── androidTest
│       │   └── java
│       │       └── com
│       │           └── befitnessapp
│       │               └── ExampleInstrumentedTest.kt
│       ├── main
│       │   ├── AndroidManifest.xml
│       │   ├── java
│       │   │   ├── com
│       │   │   │   └── befitnessapp
│       │   │   │       ├── BeFitnessApplication.kt
│       │   │   │       ├── Graph.kt
│       │   │   │       ├── MainActivity.kt
│       │   │   │       ├── auth
│       │   │   │       │   ├── AuthRepository.kt
│       │   │   │       │   ├── AuthState.kt
│       │   │   │       │   └── AuthUi.kt
│       │   │   │       ├── data
│       │   │   │       │   ├── local
│       │   │   │       │   │   ├── aggregates
│       │   │   │       │   │   ├── dao
│       │   │   │       │   │   │   └── WorkoutDao.kt
│       │   │   │       │   │   ├── db
│       │   │   │       │   │   │   ├── AppDatabase.kt
│       │   │   │       │   │   │   ├── Converters.kt
│       │   │   │       │   │   │   └── DatabaseProvider.kt
│       │   │   │       │   │   └── entity
│       │   │   │       │   │       └── WorkoutEntities.kt
│       │   │   │       │   ├── migrations
│       │   │   │       │   ├── prefs
│       │   │   │       │   │   └── UserPrefs.kt
│       │   │   │       │   ├── repository
│       │   │   │       │   │   └── WorkoutRepository.kt
│       │   │   │       │   └── sync
│       │   │   │       │       ├── dto
│       │   │   │       │       ├── engine
│       │   │   │       │       ├── mapper
│       │   │   │       │       └── remote
│       │   │   │       ├── domain
│       │   │   │       │   ├── catalog
│       │   │   │       │   │   ├── CatalogData.kt
│       │   │   │       │   │   ├── Catalogo.kt
│       │   │   │       │   │   ├── GruposMusculares.kt
│       │   │   │       │   │   ├── ejercicios
│       │   │   │       │   │   │   ├── EjerciciosBrazos.kt
│       │   │   │       │   │   │   ├── EjerciciosCore.kt
│       │   │   │       │   │   │   ├── EjerciciosEspalda.kt
│       │   │   │       │   │   │   ├── EjerciciosGluteos.kt
│       │   │   │       │   │   │   ├── EjerciciosHombros.kt
│       │   │   │       │   │   │   ├── EjerciciosPecho.kt
│       │   │   │       │   │   │   └── EjerciciosPiernas.kt
│       │   │   │       │   │   ├── grupos
│       │   │   │       │   │   │   ├── GrupoBrazos.kt
│       │   │   │       │   │   │   ├── GrupoCore.kt
│       │   │   │       │   │   │   ├── GrupoEspalda.kt
│       │   │   │       │   │   │   ├── GrupoGluteos.kt
│       │   │   │       │   │   │   ├── GrupoHombros.kt
│       │   │   │       │   │   │   ├── GrupoPecho.kt
│       │   │   │       │   │   │   └── GrupoPiernas.kt
│       │   │   │       │   │   └── models.kt
│       │   │   │       │   └── recommendation
│       │   │   │       │       ├── MetaSemanal.kt
│       │   │   │       │       └── ScoringPolicy.kt
│       │   │   │       ├── ui
│       │   │   │       │   ├── App.kt
│       │   │   │       │   ├── components
│       │   │   │       │   │   └── DotsIndicator.kt
│       │   │   │       │   ├── navigation
│       │   │   │       │   │   ├── AppNavHost.kt
│       │   │   │       │   │   └── Routes.kt
│       │   │   │       │   ├── screens
│       │   │   │       │   │   ├── addlog
│       │   │   │       │   │   │   ├── AddWorkoutScreen.kt
│       │   │   │       │   │   │   └── AddWorkoutViewModel.kt
│       │   │   │       │   │   ├── auth
│       │   │   │       │   │   │   ├── LoginScreen.kt
│       │   │   │       │   │   │   └── RegisterScreen.kt
│       │   │   │       │   │   ├── calendar
│       │   │   │       │   │   │   └── CalendarScreen.kt
│       │   │   │       │   │   ├── dashboard
│       │   │   │       │   │   │   └── DashboardScreen.kt
│       │   │   │       │   │   ├── home
│       │   │   │       │   │   │   └── HomeScreen.kt
│       │   │   │       │   │   ├── library
│       │   │   │       │   │   │   └── LibraryScreen.kt
│       │   │   │       │   │   ├── log
│       │   │   │       │   │   │   ├── WorkoutLogScreen.kt
│       │   │   │       │   │   │   └── WorkoutLogViewModel.kt
│       │   │   │       │   │   ├── musclemap
│       │   │   │       │   │   │   └── MuscleMapScreen.kt
│       │   │   │       │   │   ├── onboarding
│       │   │   │       │   │   │   └── OnboardingScreen.kt
│       │   │   │       │   │   ├── profile
│       │   │   │       │   │   │   └── ProfileScreen.kt
│       │   │   │       │   │   ├── recommendations
│       │   │   │       │   │   │   └── RecommendationsScreen.kt
│       │   │   │       │   │   ├── routines
│       │   │   │       │   │   │   └── RoutinesScreen.kt
│       │   │   │       │   │   └── settings
│       │   │   │       │   │       └── SettingsScreen.kt
│       │   │   │       │   ├── svg
│       │   │   │       │   └── theme
│       │   │   │       │       ├── Color.kt
│       │   │   │       │       ├── Theme.kt
│       │   │   │       │       └── Type.kt
│       │   │   │       ├── utils
│       │   │   │       └── work
│       │   │   └── firebase
│       │   │       ├── README.md
│       │   │       ├── firestore.rules
│       │   │       └── google-services.json
│       │   └── res
│       │       ├── drawable
│       │       │   ├── ic_launcher_background.xml
│       │       │   └── ic_launcher_foreground.xml
│       │       ├── mipmap-anydpi
│       │       │   ├── ic_launcher.xml
│       │       │   └── ic_launcher_round.xml
│       │       ├── mipmap-hdpi
│       │       │   ├── ic_launcher.webp
│       │       │   └── ic_launcher_round.webp
│       │       ├── mipmap-mdpi
│       │       │   ├── ic_launcher.webp
│       │       │   └── ic_launcher_round.webp
│       │       ├── mipmap-xhdpi
│       │       │   ├── ic_launcher.webp
│       │       │   └── ic_launcher_round.webp
│       │       ├── mipmap-xxhdpi
│       │       │   ├── ic_launcher.webp
│       │       │   └── ic_launcher_round.webp
│       │       ├── mipmap-xxxhdpi
│       │       │   ├── ic_launcher.webp
│       │       │   └── ic_launcher_round.webp
│       │       ├── values
│       │       │   ├── colors.xml
│       │       │   ├── strings.xml
│       │       │   └── themes.xml
│       │       └── xml
│       │           ├── backup_rules.xml
│       │           └── data_extraction_rules.xml
│       └── test
│           └── java
│               └── com
│                   └── befitnessapp
│                       └── ExampleUnitTest.kt
├── build.gradle.kts
├── gradle
│   ├── libs.versions.toml
│   └── wrapper
│       ├── gradle-wrapper.jar
│       └── gradle-wrapper.properties
├── gradle.properties
├── gradlew
├── gradlew.bat
├── local.properties
├── project_structure.txt
└── settings.gradle.kts

177 directories, 229 files

## Entorno (Gradle/Java)


------------------------------------------------------------
Gradle 8.13
------------------------------------------------------------

Build time:    2025-02-25 09:22:14 UTC
Revision:      073314332697ba45c16c0a0ce1891fa6794179ff

Kotlin:        2.0.21
Groovy:        3.0.22
Ant:           Apache Ant(TM) version 1.10.15 compiled on August 25 2024
Launcher JVM:  25 (Eclipse Adoptium 25+36-LTS)
Daemon JVM:    /Library/Java/JavaVirtualMachines/temurin-25.jdk/Contents/Home (no JDK specified, using current Java home)
OS:            Mac OS X 26.0.1 aarch64


/Library/Java/JavaVirtualMachines/temurin-25.jdk/Contents/Home

## Archivos con contenido (orden alfabético)

----- FILE: .gitignore -----
```
# Gradle / builds
.gradle/
**/build/
!gradle/wrapper/gradle-wrapper.jar

# Android Studio / IDE
.idea/
*.iml
captures/

# Local config
local.properties

# Outputs
*.apk
*.aab

# Dumps / grandes
*.hprof

# NDK (si aplica)
.cxx/
externalNativeBuild/

# Firebase (opcional ignóralo si repo público)
google-services.json

# OS / misc
.DS_Store
*.log
```

----- FILE: app/.gitignore -----
```
/build```

----- FILE: app/build.gradle.kts -----
```
plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.kotlin.compose)
    alias(libs.plugins.kotlin.kapt)
}

android {
    namespace = "com.befitnessapp"
    compileSdk = 36

    defaultConfig {
        applicationId = "com.befitnessapp"
        minSdk = 26
        targetSdk = 36
        versionCode = 1
        versionName = "1.0"
        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            isMinifyEnabled = false
            proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro")
        }
    }

    // Java/Kotlin 17 (requerido por AGP 8.x)
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
    kotlinOptions { jvmTarget = "17" }
    // (opcional) fuerza toolchain 17
    kotlin { jvmToolchain(17) }

    buildFeatures { compose = true }
}

dependencies {
    // Compose
    implementation(platform(libs.androidx.compose.bom))
    implementation(libs.androidx.ui)
    implementation(libs.androidx.ui.graphics)
    implementation(libs.androidx.ui.tooling.preview)
    implementation(libs.androidx.material3)
    implementation(libs.androidx.activity.compose)
    implementation(libs.androidx.lifecycle.runtime.ktx)
    implementation(libs.androidx.core.ktx)
    implementation(libs.androidx.foundation)
    implementation(libs.androidx.ui.text)


    // Navigation Compose
    implementation(libs.androidx.navigation.compose)

    // DataStore
    implementation(libs.androidx.datastore.preferences)

    // Room (con KAPT)
    implementation(libs.androidx.room.runtime)
    implementation(libs.androidx.room.ktx)
    kapt(libs.androidx.room.compiler)

    // WorkManager
    implementation(libs.androidx.work.runtime.ktx)

    // Coroutines
    implementation(libs.kotlinx.coroutines.android)

    // Firebase + Google Sign-In
    implementation(platform(libs.firebase.bom))
    implementation(libs.firebase.auth)
    implementation(libs.firebase.firestore)
    implementation(libs.play.services.auth)

    // Tests / debug
    testImplementation(libs.junit)
    androidTestImplementation(libs.androidx.junit)
    androidTestImplementation(libs.androidx.espresso.core)
    androidTestImplementation(platform(libs.androidx.compose.bom))
    androidTestImplementation(libs.androidx.ui.test.junit4)
    debugImplementation(libs.androidx.ui.tooling)
    debugImplementation(libs.androidx.ui.test.manifest)
}

// Aplica google-services solo si existe el JSON (para que el demo compile sin Firebase)
if (file("google-services.json").exists()) {
    apply(plugin = "com.google.gms.google-services")
}
```

----- FILE: app/proguard-rules.pro -----
```
# Add project specific ProGuard rules here.
# You can control the set of applied configuration files using the
# proguardFiles setting in build.gradle.
#
# For more details, see
#   http://developer.android.com/guide/developing/tools/proguard.html

# If your project uses WebView with JS, uncomment the following
# and specify the fully qualified class name to the JavaScript interface
# class:
#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
#   public *;
#}

# Uncomment this to preserve the line number information for
# debugging stack traces.
#-keepattributes SourceFile,LineNumberTable

# If you keep the line number information, uncomment this to
# hide the original source file name.
#-renamesourcefileattribute SourceFile```

----- FILE: app/src/androidTest/java/com/befitnessapp/ExampleInstrumentedTest.kt -----
```
package com.befitnessapp

import androidx.test.platform.app.InstrumentationRegistry
import androidx.test.ext.junit.runners.AndroidJUnit4

import org.junit.Test
import org.junit.runner.RunWith

import org.junit.Assert.*

/**
 * Instrumented test, which will execute on an Android device.
 *
 * See [testing documentation](http://d.android.com/tools/testing).
 */
@RunWith(AndroidJUnit4::class)
class ExampleInstrumentedTest {
    @Test
    fun useAppContext() {
        // Context of the app under test.
        val appContext = InstrumentationRegistry.getInstrumentation().targetContext
        assertEquals("com.befitnessapp", appContext.packageName)
    }
}```

----- FILE: app/src/main/AndroidManifest.xml -----
```
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <application
        android:name=".BeFitnessApplication"
        android:allowBackup="true"
        android:dataExtractionRules="@xml/data_extraction_rules"
        android:fullBackupContent="@xml/backup_rules"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.BeFitnessApp">

        <activity
            android:name=".MainActivity"
            android:exported="true"
            android:label="@string/app_name"
            android:theme="@style/Theme.BeFitnessApp">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>

    </application>
</manifest>
```

----- FILE: app/src/main/java/com/befitnessapp/BeFitnessApplication.kt -----
```
package com.befitnessapp

import android.app.Application

class BeFitnessApplication : Application() {
    override fun onCreate() {
        super.onCreate()
        // Inicializa singletons (DB, Repos, DataStore) antes de cualquier UI
        Graph.init(this)
    }
}
```

----- FILE: app/src/main/java/com/befitnessapp/Graph.kt -----
```
package com.befitnessapp

import android.content.Context
import com.befitnessapp.data.local.db.DatabaseProvider
import com.befitnessapp.data.prefs.UserPrefs
import com.befitnessapp.data.repository.WorkoutRepository

object Graph {
    @Volatile private var initialized = false

    lateinit var workoutRepository: WorkoutRepository
        private set

    lateinit var userPrefs: UserPrefs
        private set

    fun init(context: Context) {
        if (initialized) return
        val db = DatabaseProvider.get(context)
        workoutRepository = WorkoutRepository(db.workoutDao())
        userPrefs = UserPrefs(context.applicationContext)
        initialized = true
    }
}
```

----- FILE: app/src/main/java/com/befitnessapp/MainActivity.kt -----
```
package com.befitnessapp

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import com.befitnessapp.ui.App

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent { App() }
    }
}
```

----- FILE: app/src/main/java/com/befitnessapp/auth/AuthRepository.kt -----
```
```

----- FILE: app/src/main/java/com/befitnessapp/auth/AuthState.kt -----
```
```

----- FILE: app/src/main/java/com/befitnessapp/auth/AuthUi.kt -----
```
```

----- FILE: app/src/main/java/com/befitnessapp/data/local/dao/WorkoutDao.kt -----
```
package com.befitnessapp.data.local.dao

import androidx.room.Dao
import androidx.room.Query
import androidx.room.Transaction
import androidx.room.Upsert
import com.befitnessapp.data.local.entity.WorkoutEntity
import com.befitnessapp.data.local.entity.WorkoutSetEntity
import kotlinx.coroutines.flow.Flow
import java.time.LocalDate

data class WorkoutWithSets(
    val workout: WorkoutEntity,
    val sets: List<WorkoutSetEntity>
)

@Dao
interface WorkoutDao {

    // ===== writes =====
    @Upsert
    suspend fun upsertWorkout(workout: WorkoutEntity)

    @Upsert
    suspend fun upsertSets(sets: List<WorkoutSetEntity>)

    @Transaction
    suspend fun insertWorkoutWithSets(workout: WorkoutEntity, sets: List<WorkoutSetEntity>) {
        upsertWorkout(workout)
        upsertSets(sets)
    }

    // ===== reads =====
    @Query("SELECT * FROM workout WHERE deleted = 0 ORDER BY date DESC, createdAt DESC LIMIT :limit")
    fun observeRecentWorkouts(limit: Int = 50): Flow<List<WorkoutEntity>>

    @Query("SELECT * FROM workout WHERE deleted = 0 AND date BETWEEN :from AND :to ORDER BY date DESC, createdAt DESC")
    fun observeWorkoutsInRange(from: LocalDate, to: LocalDate): Flow<List<WorkoutEntity>>

    @Query("SELECT * FROM workout_set WHERE deleted = 0 AND workoutId = :workoutId ORDER BY exerciseId ASC, setIndex ASC")
    suspend fun getSetsForWorkout(workoutId: String): List<WorkoutSetEntity>
}
```

----- FILE: app/src/main/java/com/befitnessapp/data/local/db/AppDatabase.kt -----
```
package com.befitnessapp.data.local.db

import androidx.room.Database
import androidx.room.RoomDatabase
import androidx.room.TypeConverters
import com.befitnessapp.data.local.dao.WorkoutDao
import com.befitnessapp.data.local.entity.WorkoutEntity
import com.befitnessapp.data.local.entity.WorkoutSetEntity

@Database(
    entities = [WorkoutEntity::class, WorkoutSetEntity::class],
    version = 1,
    exportSchema = false
)
@TypeConverters(Converters::class)
abstract class AppDatabase : RoomDatabase() {
    abstract fun workoutDao(): WorkoutDao
}
```

----- FILE: app/src/main/java/com/befitnessapp/data/local/db/Converters.kt -----
```
package com.befitnessapp.data.local.db

import androidx.room.TypeConverter
import java.time.Instant
import java.time.LocalDate

class Converters {
    @TypeConverter fun fromLocalDate(value: LocalDate?): String? = value?.toString()
    @TypeConverter fun toLocalDate(value: String?): LocalDate? = value?.let(LocalDate::parse)

    @TypeConverter fun fromInstant(value: Instant?): Long? = value?.toEpochMilli()
    @TypeConverter fun toInstant(value: Long?): Instant? = value?.let(Instant::ofEpochMilli)
}
```

----- FILE: app/src/main/java/com/befitnessapp/data/local/db/DatabaseProvider.kt -----
```
package com.befitnessapp.data.local.db

import android.content.Context
import androidx.room.Room

object DatabaseProvider {
    @Volatile private var instance: AppDatabase? = null

    fun get(context: Context): AppDatabase =
        instance ?: synchronized(this) {
            instance ?: Room.databaseBuilder(
                context.applicationContext,
                AppDatabase::class.java,
                "befitness.db"
            ).build().also { instance = it }
        }
}
```

----- FILE: app/src/main/java/com/befitnessapp/data/local/entity/WorkoutEntities.kt -----
```
package com.befitnessapp.data.local.entity

import androidx.room.Entity
import androidx.room.Index
import androidx.room.PrimaryKey
import java.time.Instant
import java.time.LocalDate
import java.util.*

@Entity(
    tableName = "workout",
    indices = [Index("date")]
)
data class WorkoutEntity(
    @PrimaryKey val id: String = UUID.randomUUID().toString(),
    val date: LocalDate,
    val notes: String? = null,
    val createdAt: Instant = Instant.now(),
    val updatedAt: Instant = Instant.now(),
    val deleted: Boolean = false
)

@Entity(
    tableName = "workout_set",
    indices = [Index("workoutId"), Index("exerciseId")]
)
data class WorkoutSetEntity(
    @PrimaryKey val id: String = UUID.randomUUID().toString(),
    val workoutId: String,
    val exerciseId: Int,        // ID del catálogo
    val setIndex: Int,          // 1,2,3... dentro del ejercicio de ese día
    val reps: Int,
    val weight: Float,          // en kg o lb (según pref), lo resolveremos en UI
    val createdAt: Instant = Instant.now(),
    val updatedAt: Instant = Instant.now(),
    val deleted: Boolean = false
)
```

----- FILE: app/src/main/java/com/befitnessapp/data/prefs/UserPrefs.kt -----
```
package com.befitnessapp.data.prefs

import android.content.Context
import androidx.datastore.preferences.core.Preferences
import androidx.datastore.preferences.core.booleanPreferencesKey
import androidx.datastore.preferences.core.edit
import androidx.datastore.preferences.core.intPreferencesKey
import androidx.datastore.preferences.preferencesDataStore
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.map

private val Context.dataStore by preferencesDataStore(name = "user_prefs")

object UserPrefsKeys {
    val unitIsKg: Preferences.Key<Boolean> = booleanPreferencesKey("unit_is_kg") // true=kg, false=lb
    val hasSeenOnboarding: Preferences.Key<Boolean> = booleanPreferencesKey("has_seen_onboarding")
    val daysPerWeek: Preferences.Key<Int> = intPreferencesKey("days_per_week")
}

class UserPrefs(private val context: Context) {
    val unitIsKgFlow: Flow<Boolean> = context.dataStore.data.map { it[UserPrefsKeys.unitIsKg] ?: true }

    suspend fun setUnitIsKg(isKg: Boolean) {
        context.dataStore.edit { it[UserPrefsKeys.unitIsKg] = isKg }
    }

    val hasSeenOnboardingFlow: Flow<Boolean> = context.dataStore.data.map { it[UserPrefsKeys.hasSeenOnboarding] ?: false }
    suspend fun setHasSeenOnboarding(seen: Boolean) {
        context.dataStore.edit { it[UserPrefsKeys.hasSeenOnboarding] = seen }
    }
}
```

----- FILE: app/src/main/java/com/befitnessapp/data/repository/WorkoutRepository.kt -----
```
package com.befitnessapp.data.repository

import com.befitnessapp.data.local.dao.WorkoutDao
import com.befitnessapp.data.local.dao.WorkoutWithSets
import com.befitnessapp.data.local.entity.WorkoutEntity
import com.befitnessapp.data.local.entity.WorkoutSetEntity
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.map
import java.time.Instant
import java.time.LocalDate
import java.util.*

data class SetInput(
    val exerciseId: Int,
    val reps: Int,
    val weight: Float
)

class WorkoutRepository(private val dao: WorkoutDao) {

    suspend fun createWorkout(
        date: LocalDate,
        notes: String?,
        setsByExercise: Map<Int, List<Pair<Int, Float>>> // exerciseId -> list of (reps, weight)
    ) {
        val workoutId = UUID.randomUUID().toString()
        val now = Instant.now()

        val sets = buildList {
            setsByExercise.forEach { (exerciseId, list) ->
                list.forEachIndexed { idx, (reps, weight) ->
                    add(
                        WorkoutSetEntity(
                            id = UUID.randomUUID().toString(),
                            workoutId = workoutId,
                            exerciseId = exerciseId,
                            setIndex = idx + 1,
                            reps = reps,
                            weight = weight,
                            createdAt = now,
                            updatedAt = now,
                            deleted = false
                        )
                    )
                }
            }
        }

        val workout = WorkoutEntity(
            id = workoutId,
            date = date,
            notes = notes,
            createdAt = now,
            updatedAt = now,
            deleted = false
        )

        dao.insertWorkoutWithSets(workout, sets)
    }

    fun observeRecent(limit: Int = 30): Flow<List<WorkoutWithSets>> =
        dao.observeRecentWorkouts(limit).map { workouts ->
            workouts.map { w ->
                val sets = dao.getSetsForWorkout(w.id)
                WorkoutWithSets(w, sets)
            }
        }

    fun observeRange(from: LocalDate, to: LocalDate): Flow<List<WorkoutWithSets>> =
        dao.observeWorkoutsInRange(from, to).map { workouts ->
            workouts.map { w ->
                val sets = dao.getSetsForWorkout(w.id)
                WorkoutWithSets(w, sets)
            }
        }
}
```

----- FILE: app/src/main/java/com/befitnessapp/domain/catalog/CatalogData.kt -----
```
package com.befitnessapp.domain.catalog

// ====== IDs de Grupos ======
const val GRUPO_ESPALDA = 11
const val GRUPO_PECHO   = 12
const val GRUPO_HOMBROS = 13
const val GRUPO_PIERNAS = 14
const val GRUPO_GLUTEOS = 15
const val GRUPO_BRAZOS  = 16
const val GRUPO_CORE    = 17

// ====== Músculos (IDs canónicos/porciones) ======
// Espalda (11)
const val M_DORSAL_ANCHO     = 1100
const val M_ROMBOIDES        = 1101
const val M_TRAPECIO         = 1102
const val M_TRAPECIO_MEDIO   = 1103 // parent: 1102
const val M_TRAPECIO_SUPERIOR= 1104 // parent: 1102
const val M_ERECTORES        = 1105

// Pecho (12)
const val M_PECTORAL         = 1200
const val M_PEC_SUPERIOR     = 1201 // parent: 1200
const val M_PEC_MEDIO        = 1202 // parent: 1200
const val M_PEC_INFERIOR     = 1203 // parent: 1200

// Hombros (13)
const val M_DELTOIDE         = 1300
const val M_DEL_ANTERIOR     = 1301 // parent: 1300
const val M_DEL_LATERAL      = 1302 // parent: 1300
const val M_DEL_POSTERIOR    = 1303 // parent: 1300

// Piernas (14)
const val M_CUADRICEPS       = 1400
const val M_ISQUIOS          = 1401
const val M_PANTORRILLAS     = 1402
const val M_GASTROCNEMIO     = 1403 // parent: 1402
const val M_SOLEO            = 1404 // parent: 1402

// Glúteos (15)
const val M_GLUTEO_MAYOR     = 1500
const val M_GLUTEO_MEDIO     = 1501

// Brazos (16)
const val M_BICEPS           = 1600
const val M_BICEPS_LARGO     = 1601 // parent: 1600
const val M_BICEPS_CORTO     = 1602 // parent: 1600
const val M_TRICEPS          = 1603
const val M_TRI_LARGO        = 1604 // parent: 1603
const val M_TRI_MEDIAL       = 1605 // parent: 1603
const val M_TRI_LATERAL      = 1606 // parent: 1603

// Core (17)
const val M_RECTO_ABDOMINAL  = 1700
const val M_OBLICUOS         = 1701

// ====== Listas base ======
val groups: List<MuscleGroup> = listOf(
    MuscleGroup(GRUPO_ESPALDA, "Espalda"),
    MuscleGroup(GRUPO_PECHO,   "Pecho"),
    MuscleGroup(GRUPO_HOMBROS, "Hombros"),
    MuscleGroup(GRUPO_PIERNAS, "Piernas"),
    MuscleGroup(GRUPO_GLUTEOS, "Glúteos"),
    MuscleGroup(GRUPO_BRAZOS,  "Brazos"),
    MuscleGroup(GRUPO_CORE,    "Core"),
)

val muscles: List<Muscle> = listOf(
    // Espalda
    Muscle(M_DORSAL_ANCHO, GRUPO_ESPALDA, "Dorsal ancho"),
    Muscle(M_ROMBOIDES, GRUPO_ESPALDA, "Romboides"),
    Muscle(M_TRAPECIO, GRUPO_ESPALDA, "Trapecio"),
    Muscle(M_TRAPECIO_MEDIO, GRUPO_ESPALDA, "Trapecio medio", parentId = M_TRAPECIO),
    Muscle(M_TRAPECIO_SUPERIOR, GRUPO_ESPALDA, "Trapecio superior", parentId = M_TRAPECIO),
    Muscle(M_ERECTORES, GRUPO_ESPALDA, "Erectores espinales"),

    // Pecho
    Muscle(M_PECTORAL, GRUPO_PECHO, "Pectoral"),
    Muscle(M_PEC_SUPERIOR, GRUPO_PECHO, "Pectoral superior", parentId = M_PECTORAL),
    Muscle(M_PEC_MEDIO, GRUPO_PECHO, "Pectoral medio", parentId = M_PECTORAL),
    Muscle(M_PEC_INFERIOR, GRUPO_PECHO, "Pectoral inferior", parentId = M_PECTORAL),

    // Hombros
    Muscle(M_DELTOIDE, GRUPO_HOMBROS, "Deltoide"),
    Muscle(M_DEL_ANTERIOR, GRUPO_HOMBROS, "Deltoide anterior", parentId = M_DELTOIDE),
    Muscle(M_DEL_LATERAL, GRUPO_HOMBROS, "Deltoide lateral", parentId = M_DELTOIDE),
    Muscle(M_DEL_POSTERIOR, GRUPO_HOMBROS, "Deltoide posterior", parentId = M_DELTOIDE),

    // Piernas
    Muscle(M_CUADRICEPS, GRUPO_PIERNAS, "Cuádriceps"),
    Muscle(M_ISQUIOS, GRUPO_PIERNAS, "Isquiosurales"),
    Muscle(M_PANTORRILLAS, GRUPO_PIERNAS, "Pantorrillas"),
    Muscle(M_GASTROCNEMIO, GRUPO_PIERNAS, "Gastrocnemio", parentId = M_PANTORRILLAS),
    Muscle(M_SOLEO, GRUPO_PIERNAS, "Sóleo", parentId = M_PANTORRILLAS),

    // Glúteos
    Muscle(M_GLUTEO_MAYOR, GRUPO_GLUTEOS, "Glúteo mayor"),
    Muscle(M_GLUTEO_MEDIO, GRUPO_GLUTEOS, "Glúteo medio"),

    // Brazos
    Muscle(M_BICEPS, GRUPO_BRAZOS, "Bíceps"),
    Muscle(M_BICEPS_LARGO, GRUPO_BRAZOS, "Bíceps cabeza larga", parentId = M_BICEPS),
    Muscle(M_BICEPS_CORTO, GRUPO_BRAZOS, "Bíceps cabeza corta", parentId = M_BICEPS),
    Muscle(M_TRICEPS, GRUPO_BRAZOS, "Tríceps"),
    Muscle(M_TRI_LARGO, GRUPO_BRAZOS, "Tríceps cabeza larga", parentId = M_TRICEPS),
    Muscle(M_TRI_MEDIAL, GRUPO_BRAZOS, "Tríceps medial", parentId = M_TRICEPS),
    Muscle(M_TRI_LATERAL, GRUPO_BRAZOS, "Tríceps lateral", parentId = M_TRICEPS),

    // Core
    Muscle(M_RECTO_ABDOMINAL, GRUPO_CORE, "Recto abdominal"),
    Muscle(M_OBLICUOS, GRUPO_CORE, "Oblicuos"),
)

// ====== Ejercicios (12) ======
private fun rr(h: IntRange, f: IntRange, r: IntRange) = mapOf(
    RepGoal.HIPERTROFIA to RepRange(h.first, h.last),
    RepGoal.FUERZA to RepRange(f.first, f.last),
    RepGoal.RESISTENCIA to RepRange(r.first, r.last),
)

val exercises: List<Exercise> = listOf(
    Exercise(
        id = 12001,
        name = "Bench press plano (barra)",
        pattern = Pattern.PRESS,
        repRangeByGoal = rr(8..12, 3..6, 12..20),
        contraindications = listOf("hombro"),
        targets = listOf(
            ExerciseTarget(M_PEC_MEDIO, 0.80, TargetRole.PRIMARY),
            ExerciseTarget(M_PEC_SUPERIOR, 0.20, TargetRole.SECONDARY),
            ExerciseTarget(M_TRI_LATERAL, 0.50, TargetRole.SECONDARY),
            ExerciseTarget(M_TRI_MEDIAL, 0.50, TargetRole.SECONDARY),
        )
    ),
    Exercise(
        id = 12002,
        name = "Press inclinado (mancuernas)",
        pattern = Pattern.PRESS,
        repRangeByGoal = rr(8..12, 4..6, 12..15),
        contraindications = listOf("hombro"),
        targets = listOf(
            ExerciseTarget(M_PEC_SUPERIOR, 0.80, TargetRole.PRIMARY),
            ExerciseTarget(M_PEC_MEDIO, 0.20, TargetRole.SECONDARY),
            ExerciseTarget(M_TRI_LATERAL, 0.50, TargetRole.SECONDARY),
        )
    ),
    Exercise(
        id = 11001,
        name = "Remo con barra",
        pattern = Pattern.ROW,
        repRangeByGoal = rr(8..12, 4..6, 12..15),
        contraindications = listOf("lumbar"),
        targets = listOf(
            ExerciseTarget(M_DORSAL_ANCHO, 0.60, TargetRole.PRIMARY),
            ExerciseTarget(M_ROMBOIDES, 0.40, TargetRole.PRIMARY),
            ExerciseTarget(M_TRAPECIO_MEDIO, 0.40, TargetRole.SECONDARY),
            ExerciseTarget(M_BICEPS, 0.50, TargetRole.SECONDARY),
        )
    ),
    Exercise(
        id = 11002,
        name = "Jalón al pecho (polea)",
        pattern = Pattern.PULL,
        repRangeByGoal = rr(8..12, 4..6, 12..15),
        targets = listOf(
            ExerciseTarget(M_DORSAL_ANCHO, 0.70, TargetRole.PRIMARY),
            ExerciseTarget(M_ROMBOIDES, 0.30, TargetRole.SECONDARY),
            ExerciseTarget(M_BICEPS, 0.50, TargetRole.SECONDARY),
        )
    ),
    Exercise(
        id = 13001,
        name = "Press militar",
        pattern = Pattern.OVERHEAD,
        repRangeByGoal = rr(8..12, 3..6, 12..15),
        contraindications = listOf("hombro"),
        targets = listOf(
            ExerciseTarget(M_DEL_ANTERIOR, 0.60, TargetRole.PRIMARY),
            ExerciseTarget(M_DEL_LATERAL, 0.40, TargetRole.PRIMARY),
            ExerciseTarget(M_TRI_LATERAL, 0.50, TargetRole.SECONDARY),
        )
    ),
    Exercise(
        id = 13002,
        name = "Elevaciones laterales",
        pattern = Pattern.RAISE,
        repRangeByGoal = rr(10..15, 6..8, 15..20),
        targets = listOf(
            ExerciseTarget(M_DEL_LATERAL, 1.00, TargetRole.PRIMARY),
        )
    ),
    Exercise(
        id = 14001,
        name = "Sentadilla trasera",
        pattern = Pattern.SQUAT,
        repRangeByGoal = rr(6..10, 3..5, 12..15),
        contraindications = listOf("rodilla", "lumbar"),
        targets = listOf(
            ExerciseTarget(M_CUADRICEPS, 0.50, TargetRole.PRIMARY),
            ExerciseTarget(M_GLUTEO_MAYOR, 0.30, TargetRole.SECONDARY),
            ExerciseTarget(M_ERECTORES, 0.20, TargetRole.SECONDARY),
        )
    ),
    Exercise(
        id = 14002,
        name = "Peso muerto rumano (RDL)",
        pattern = Pattern.HINGE,
        repRangeByGoal = rr(6..10, 3..5, 10..12),
        contraindications = listOf("lumbar"),
        targets = listOf(
            ExerciseTarget(M_ISQUIOS, 0.60, TargetRole.PRIMARY),
            ExerciseTarget(M_GLUTEO_MAYOR, 0.30, TargetRole.SECONDARY),
            ExerciseTarget(M_ERECTORES, 0.10, TargetRole.SECONDARY),
        )
    ),
    Exercise(
        id = 14003,
        name = "Elevación de talones (de pie)",
        pattern = Pattern.CALF,
        repRangeByGoal = rr(10..15, 6..8, 15..20),
        targets = listOf(
            ExerciseTarget(M_GASTROCNEMIO, 0.70, TargetRole.PRIMARY),
            ExerciseTarget(M_SOLEO, 0.30, TargetRole.SECONDARY),
        )
    ),
    Exercise(
        id = 15001,
        name = "Hip thrust",
        pattern = Pattern.THRUST,
        repRangeByGoal = rr(8..12, 4..6, 12..15),
        targets = listOf(
            ExerciseTarget(M_GLUTEO_MAYOR, 0.70, TargetRole.PRIMARY),
            ExerciseTarget(M_ISQUIOS, 0.20, TargetRole.SECONDARY),
            ExerciseTarget(M_CUADRICEPS, 0.10, TargetRole.SECONDARY),
        )
    ),
    Exercise(
        id = 16001,
        name = "Curl de bíceps (barra)",
        pattern = Pattern.CURL,
        repRangeByGoal = rr(8..12, 4..6, 12..15),
        targets = listOf(
            ExerciseTarget(M_BICEPS_LARGO, 0.60, TargetRole.PRIMARY),
            ExerciseTarget(M_BICEPS_CORTO, 0.40, TargetRole.PRIMARY),
        )
    ),
    Exercise(
        id = 16002,
        name = "Jalón de tríceps (polea)",
        pattern = Pattern.EXTENSION,
        repRangeByGoal = rr(8..12, 4..6, 12..15),
        targets = listOf(
            ExerciseTarget(M_TRI_LATERAL, 0.50, TargetRole.PRIMARY),
            ExerciseTarget(M_TRI_MEDIAL, 0.30, TargetRole.SECONDARY),
            ExerciseTarget(M_TRI_LARGO, 0.20, TargetRole.SECONDARY),
        )
    ),
)
```

----- FILE: app/src/main/java/com/befitnessapp/domain/catalog/Catalogo.kt -----
```
package com.befitnessapp.domain.catalog

object Catalogo {
    val allGroups = groups
    val allMuscles = muscles
    val allExercises = exercises

    val muscleById: Map<Int, Muscle> = allMuscles.associateBy { it.id }
    val groupById: Map<Int, MuscleGroup> = allGroups.associateBy { it.id }

    // índice ejercicio→músculos target
    val targetsByExerciseId: Map<Int, List<ExerciseTarget>> =
        allExercises.associate { it.id to it.targets }

    // índice músculo→ejercicios implicados
    val exercisesByMuscleId: Map<Int, List<Exercise>> =
        allMuscles.associate { m ->
            val list = allExercises.filter { ex -> ex.targets.any { it.muscleId == m.id } }
            m.id to list
        }

    fun searchExercises(
        query: String = "",
        groupId: Int? = null,
        muscleId: Int? = null,
        pattern: Pattern? = null
    ): List<Exercise> {
        val q = query.trim().lowercase()
        return allExercises
            .asSequence()
            .filter { ex -> if (q.isBlank()) true else ex.name.lowercase().contains(q) }
            .filter { ex ->
                when {
                    muscleId != null -> ex.targets.any { it.muscleId == muscleId }
                    groupId != null -> ex.targets.any { t -> muscleById[t.muscleId]?.groupId == groupId }
                    else -> true
                }
            }
            .filter { ex -> pattern?.let { ex.pattern == it } ?: true }
            .sortedBy { it.name }
            .toList()
    }
}
```

----- FILE: app/src/main/java/com/befitnessapp/domain/catalog/GruposMusculares.kt -----
```
```

----- FILE: app/src/main/java/com/befitnessapp/domain/catalog/ejercicios/EjerciciosBrazos.kt -----
```
```

----- FILE: app/src/main/java/com/befitnessapp/domain/catalog/ejercicios/EjerciciosCore.kt -----
```
```

----- FILE: app/src/main/java/com/befitnessapp/domain/catalog/ejercicios/EjerciciosEspalda.kt -----
```
```

----- FILE: app/src/main/java/com/befitnessapp/domain/catalog/ejercicios/EjerciciosGluteos.kt -----
```
```

----- FILE: app/src/main/java/com/befitnessapp/domain/catalog/ejercicios/EjerciciosHombros.kt -----
```
```

----- FILE: app/src/main/java/com/befitnessapp/domain/catalog/ejercicios/EjerciciosPecho.kt -----
```
```

----- FILE: app/src/main/java/com/befitnessapp/domain/catalog/ejercicios/EjerciciosPiernas.kt -----
```
```

----- FILE: app/src/main/java/com/befitnessapp/domain/catalog/grupos/GrupoBrazos.kt -----
```
```

----- FILE: app/src/main/java/com/befitnessapp/domain/catalog/grupos/GrupoCore.kt -----
```
```

----- FILE: app/src/main/java/com/befitnessapp/domain/catalog/grupos/GrupoEspalda.kt -----
```
```

----- FILE: app/src/main/java/com/befitnessapp/domain/catalog/grupos/GrupoGluteos.kt -----
```
```

----- FILE: app/src/main/java/com/befitnessapp/domain/catalog/grupos/GrupoHombros.kt -----
```
```

----- FILE: app/src/main/java/com/befitnessapp/domain/catalog/grupos/GrupoPecho.kt -----
```
```

----- FILE: app/src/main/java/com/befitnessapp/domain/catalog/grupos/GrupoPiernas.kt -----
```
```

----- FILE: app/src/main/java/com/befitnessapp/domain/catalog/models.kt -----
```
package com.befitnessapp.domain.catalog

enum class Pattern { PRESS, ROW, PULL, OVERHEAD, RAISE, SQUAT, HINGE, CALF, THRUST, CURL, EXTENSION }
enum class RepGoal { HIPERTROFIA, FUERZA, RESISTENCIA }
enum class TargetRole { PRIMARY, SECONDARY }

data class MuscleGroup(
    val id: Int,
    val name: String,
)

data class Muscle(
    val id: Int,
    val groupId: Int,
    val name: String,
    val parentId: Int? = null // null => músculo “canónico”
)

data class RepRange(val min: Int, val max: Int)

data class ExerciseTarget(
    val muscleId: Int,
    val weight: Double, // impacto relativo total de primarios y secundarios (≈ suma 1.0)
    val role: TargetRole
)

data class Exercise(
    val id: Int,
    val name: String,
    val pattern: Pattern,
    val repRangeByGoal: Map<RepGoal, RepRange>,
    val contraindications: List<String> = emptyList(),
    val targets: List<ExerciseTarget>
)
```

----- FILE: app/src/main/java/com/befitnessapp/domain/recommendation/MetaSemanal.kt -----
```
```

----- FILE: app/src/main/java/com/befitnessapp/domain/recommendation/ScoringPolicy.kt -----
```
```

----- FILE: app/src/main/java/com/befitnessapp/ui/App.kt -----
```
package com.befitnessapp.ui

import androidx.compose.runtime.Composable
import com.befitnessapp.ui.navigation.AppNavHost
import com.befitnessapp.ui.theme.BeFitnessTheme

@Composable
fun App() {
    BeFitnessTheme {
        AppNavHost()
    }
}
```

----- FILE: app/src/main/java/com/befitnessapp/ui/components/DotsIndicator.kt -----
```
package com.befitnessapp.ui.components

import androidx.compose.animation.core.animateDpAsState
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Surface
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp

@Composable
fun DotsIndicator(
    totalDots: Int,
    selectedIndex: Int,
    modifier: Modifier = Modifier
) {
    Row(
        modifier = modifier.height(28.dp),
        horizontalArrangement = Arrangement.Center
    ) {
        repeat(totalDots) { index ->
            val selected = index == selectedIndex
            val dotSize = animateDpAsState(if (selected) 10.dp else 6.dp, label = "dotSize")
            Surface(
                color = if (selected) MaterialTheme.colorScheme.primary
                else MaterialTheme.colorScheme.onSurface.copy(alpha = 0.30f),
                shape = CircleShape,
                modifier = Modifier
                    .padding(horizontal = 5.dp)
                    .size(dotSize.value)
            ) {}
        }
    }
}
```

----- FILE: app/src/main/java/com/befitnessapp/ui/navigation/AppNavHost.kt -----
```
package com.befitnessapp.ui.navigation

import androidx.compose.runtime.Composable
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import androidx.navigation.compose.rememberNavController
import com.befitnessapp.ui.screens.addlog.AddWorkoutScreen
import com.befitnessapp.ui.screens.auth.LoginScreen
import com.befitnessapp.ui.screens.auth.RegisterScreen
import com.befitnessapp.ui.screens.calendar.CalendarScreen
import com.befitnessapp.ui.screens.dashboard.DashboardScreen
import com.befitnessapp.ui.screens.home.HomeScreen
import com.befitnessapp.ui.screens.library.LibraryScreen
import com.befitnessapp.ui.screens.log.WorkoutLogScreen
import com.befitnessapp.ui.screens.musclemap.MuscleMapScreen
import com.befitnessapp.ui.screens.onboarding.OnboardingScreen
import com.befitnessapp.ui.screens.profile.ProfileScreen
import com.befitnessapp.ui.screens.recommendations.RecommendationsScreen
import com.befitnessapp.ui.screens.routines.RoutinesScreen
import com.befitnessapp.ui.screens.settings.SettingsScreen

@Composable
fun AppNavHost() {
    val nav = rememberNavController()

    NavHost(
        navController = nav,
        startDestination = Route.Onboarding.path // luego cambiaremos según sesión/demo
    ) {
        // Pre-login
        composable(Route.Onboarding.path) {
            OnboardingScreen(
                onTryDemo = { nav.navigate(Route.Home.path) { popUpTo(Route.Onboarding.path) { inclusive = true } } },
                onLogin = { nav.navigate(Route.Login.path) },
                onRegister = { nav.navigate(Route.Register.path) }
            )
        }
        composable(Route.Login.path) { LoginScreen(onLoggedIn = {
            nav.navigate(Route.Home.path) { popUpTo(Route.Onboarding.path) { inclusive = true } }
        }, onBack = { nav.popBackStack() }) }
        composable(Route.Register.path) { RegisterScreen(onRegistered = {
            nav.navigate(Route.Home.path) { popUpTo(Route.Onboarding.path) { inclusive = true } }
        }, onBack = { nav.popBackStack() }) }

        // Post-login
        composable(Route.Home.path) {
            HomeScreen(
                goDashboard = { nav.navigate(Route.Dashboard.path) },
                goLibrary = { nav.navigate(Route.Library.path) },
                goMuscleMap = { nav.navigate(Route.MuscleMap.path) },
                goLog = { nav.navigate(Route.WorkoutLog.path) },
                goAddLog = { nav.navigate(Route.AddLog.path) },
                goRecommendations = { nav.navigate(Route.Recommendations.path) },
                goRoutines = { nav.navigate(Route.Routines.path) },
                goCalendar = { nav.navigate(Route.Calendar.path) },
                goProfile = { nav.navigate(Route.Profile.path) },
                goSettings = { nav.navigate(Route.Settings.path) }
            )
        }
        composable(Route.Dashboard.path) { DashboardScreen(onBack = { nav.popBackStack() }) }
        composable(Route.Library.path) { LibraryScreen(onBack = { nav.popBackStack() }) }
        composable(Route.MuscleMap.path) { MuscleMapScreen(onBack = { nav.popBackStack() }) }
        composable(Route.WorkoutLog.path) { WorkoutLogScreen(onBack = { nav.popBackStack() }) }
        composable(Route.AddLog.path) { AddWorkoutScreen(onBack = { nav.popBackStack() }) }
        composable(Route.Recommendations.path) { RecommendationsScreen(onBack = { nav.popBackStack() }) }
        composable(Route.Routines.path) { RoutinesScreen(onBack = { nav.popBackStack() }) }
        composable(Route.Calendar.path) { CalendarScreen(onBack = { nav.popBackStack() }) }
        composable(Route.Profile.path) { ProfileScreen(onBack = { nav.popBackStack() }) }
        composable(Route.Settings.path) { SettingsScreen(onBack = { nav.popBackStack() }) }
    }
}
```

----- FILE: app/src/main/java/com/befitnessapp/ui/navigation/Routes.kt -----
```
package com.befitnessapp.ui.navigation

sealed class Route(val path: String) {
    // Pre-login
    data object Onboarding : Route("onboarding")
    data object Login : Route("login")
    data object Register : Route("register")

    // Post-login
    data object Home : Route("home")
    data object Dashboard : Route("dashboard")
    data object Library : Route("library")
    data object MuscleMap : Route("musclemap")
    data object WorkoutLog : Route("workoutlog")
    data object AddLog : Route("addlog")
    data object Recommendations : Route("recommendations")
    data object Routines : Route("routines")
    data object Calendar : Route("calendar")
    data object Profile : Route("profile")
    data object Settings : Route("settings")
}
```

----- FILE: app/src/main/java/com/befitnessapp/ui/screens/addlog/AddWorkoutScreen.kt -----
```
package com.befitnessapp.ui.screens.addlog

import androidx.compose.foundation.layout.*
import androidx.compose.foundation.layout.FlowRow
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.lifecycle.viewmodel.compose.viewModel
import com.befitnessapp.Graph
import com.befitnessapp.domain.catalog.Catalogo
import com.befitnessapp.domain.catalog.Exercise
import com.befitnessapp.domain.catalog.MuscleGroup

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun AddWorkoutScreen(onBack: () -> Unit) {
    val vm: AddWorkoutViewModel =
        viewModel(factory = AddWorkoutViewModel.factory(Graph.workoutRepository))

    // búsqueda / filtro
    var query by remember { mutableStateOf("") }
    var selectedGroup: MuscleGroup? by remember { mutableStateOf(null) }
    val results by remember(query, selectedGroup) {
        mutableStateOf(
            Catalogo.searchExercises(
                query = query,
                groupId = selectedGroup?.id
            )
        )
    }

    // pop up de añadir ejercico al workout
    val sheetState = rememberModalBottomSheetState(skipPartiallyExpanded = true)
    var sheetExercise by remember { mutableStateOf<Exercise?>(null) }
    var sheetSets by remember { mutableStateOf(listOf( // filas editables como strings
        "10" to "20"
    )) }

    val entries by vm.entries.collectAsState()

    Box(Modifier.fillMaxSize()) {
        Column(
            Modifier
                .fillMaxSize()
                .padding(16.dp),
            verticalArrangement = Arrangement.spacedBy(12.dp)
        ) {
            Text("Añadir ejercicio al workout", style = MaterialTheme.typography.headlineSmall)

            // Buscar
            OutlinedTextField(
                value = query,
                onValueChange = { query = it },
                label = { Text("Buscar ejercicio") },
                modifier = Modifier.fillMaxWidth()
            )

            // Filtros por grupo
            FlowRow(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.spacedBy(8.dp),
                verticalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                AssistChip(onClick = { selectedGroup = null }, label = { Text("Todos") })
                Catalogo.allGroups.forEach { grp ->
                    val selected = selectedGroup?.id == grp.id
                    AssistChip(
                        onClick = { selectedGroup = if (selected) null else grp },
                        label = { Text(grp.name) },
                        colors = AssistChipDefaults.assistChipColors(
                            containerColor = if (selected)
                                MaterialTheme.colorScheme.primary.copy(alpha = 0.14f)
                            else
                                MaterialTheme.colorScheme.surface
                        )
                    )
                }
            }

            // Resultados
            LazyColumn(
                modifier = Modifier
                    .weight(1f)
                    .fillMaxWidth(),
                verticalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                items(results) { ex ->
                    ExerciseRow(
                        exercise = ex,
                        onAdd = {
                            sheetExercise = ex
                            sheetSets = listOf("10" to "20") // default una fila
                        }
                    )
                }
                if (results.isEmpty()) {
                    item {
                        Text(
                            "No se encontraron ejercicios.",
                            style = MaterialTheme.typography.bodyMedium
                        )
                    }
                }
            }

            // Botón final
            Button(
                onClick = {
                    vm.saveToday(
                        notes = null,
                        onDone = onBack,
                        onError = { /* TODO snackbar */ }
                    )
                },
                enabled = entries.any { it.sets.isNotEmpty() },
                modifier = Modifier.fillMaxWidth()
            ) {
                Text("Loggear Workout")
            }
        }

        // ====== SHEET PANTALLA COMPLETA ======
        if (sheetExercise != null) {
            ModalBottomSheet(
                onDismissRequest = { sheetExercise = null },
                sheetState = sheetState,
                dragHandle = { BottomSheetDefaults.DragHandle() } // se ve como pantalla completa
            ) {
                val ex = sheetExercise!!
                Column(
                    Modifier
                        .fillMaxWidth()
                        .padding(horizontal = 16.dp, vertical = 12.dp),
                    verticalArrangement = Arrangement.spacedBy(12.dp)
                ) {
                    // Top bar simple dentro del sheet
                    Text(ex.name, style = MaterialTheme.typography.titleLarge)
                    MuscleInfoCard(ex) // “muñequito” placeholder + prim/sec

                    Text("Patrón: ${ex.pattern}", style = MaterialTheme.typography.bodyMedium)

                    // ===== Editor de múltiples sets =====
                    Text("Sets", style = MaterialTheme.typography.titleMedium)

                    sheetSets.forEachIndexed { idx, (repsStr, weightStr) ->
                        Row(
                            Modifier.fillMaxWidth(),
                            horizontalArrangement = Arrangement.spacedBy(8.dp)
                        ) {
                            OutlinedTextField(
                                value = repsStr,
                                onValueChange = { new ->
                                    val clean = new.filter { it.isDigit() }.take(3)
                                    sheetSets = sheetSets.toMutableList().also { list ->
                                        list[idx] = clean to weightStr
                                    }
                                },
                                label = { Text("Reps") },
                                modifier = Modifier.weight(1f)
                            )
                            OutlinedTextField(
                                value = weightStr,
                                onValueChange = { new ->
                                    // permitir dígitos y un punto
                                    val clean = buildString {
                                        var hasDot = false
                                        new.forEach { c ->
                                            when {
                                                c.isDigit() -> append(c)
                                                c == '.' && !hasDot -> { append(c); hasDot = true }
                                            }
                                        }
                                    }.take(6)
                                    sheetSets = sheetSets.toMutableList().also { list ->
                                        list[idx] = repsStr to clean
                                    }
                                },
                                label = { Text("Peso") },
                                modifier = Modifier.weight(1f)
                            )
                            TextButton(
                                onClick = {
                                    sheetSets = sheetSets.toMutableList().also { it.removeAt(idx) }
                                },
                                enabled = sheetSets.size > 1
                            ) { Text("Eliminar") }
                        }
                    }

                    OutlinedButton(
                        onClick = {
                            sheetSets = sheetSets + ("10" to "20")
                        },
                        modifier = Modifier.fillMaxWidth()
                    ) { Text("Añadir set") }

                    Spacer(Modifier.height(8.dp))

                    Button(
                        onClick = {
                            // parsear y añadir todos los sets a VM
                            val parsed = sheetSets.mapNotNull { (r, w) ->
                                val reps = r.toIntOrNull()
                                val weight = w.toFloatOrNull()
                                if (reps != null && reps > 0) reps to (weight ?: 0f) else null
                            }
                            if (parsed.isNotEmpty()) {
                                val exId = ex.id
                                if (entries.none { it.exerciseId == exId }) {
                                    vm.addExercise(exId)
                                }
                                parsed.forEach { (reps, weight) ->
                                    vm.addSet(exId, reps = reps, weight = weight)
                                }
                                sheetExercise = null // cerrar
                            }
                        },
                        modifier = Modifier.fillMaxWidth(),
                        enabled = sheetSets.any { it.first.toIntOrNull()?.let { it > 0 } == true }
                    ) {
                        Text("Añadir al workout")
                    }

                    Spacer(Modifier.height(12.dp))
                }
            }
        }
    }
}

// ----- UI helpers -----

@Composable
private fun ExerciseRow(
    exercise: Exercise,
    onAdd: () -> Unit
) {
    Card {
        Column(Modifier.fillMaxWidth().padding(12.dp), verticalArrangement = Arrangement.spacedBy(6.dp)) {
            Text(exercise.name, style = MaterialTheme.typography.titleMedium)
            Text("Patrón: ${exercise.pattern}", style = MaterialTheme.typography.bodySmall)
            Row(Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {
                val primarios = exercise.targets
                    .filter { it.role.name == "PRIMARY" }
                    .mapNotNull { t -> Catalogo.muscleById[t.muscleId]?.name }
                    .joinToString(" · ")
                Text(
                    text = if (primarios.isBlank()) "—" else "Primario: $primarios",
                    style = MaterialTheme.typography.bodySmall
                )
                TextButton(onClick = onAdd) { Text("Añadir") }
            }
        }
    }
}

@Composable
private fun MuscleInfoCard(exercise: Exercise) {
    val primarios = remember(exercise) {
        exercise.targets.filter { it.role.name == "PRIMARY" }
            .mapNotNull { t -> Catalogo.muscleById[t.muscleId]?.name }
            .joinToString(" · ")
    }
    val secundarios = remember(exercise) {
        exercise.targets.filter { it.role.name == "SECONDARY" }
            .mapNotNull { t -> Catalogo.muscleById[t.muscleId]?.name }
            .joinToString(" · ")
    }

    Surface(shape = MaterialTheme.shapes.medium, tonalElevation = 2.dp) {
        Column(Modifier.fillMaxWidth().padding(12.dp), verticalArrangement = Arrangement.spacedBy(6.dp)) {
            Box(
                Modifier
                    .fillMaxWidth()
                    .height(160.dp)
            ) {
                Text(
                    "Vista muscular (placeholder)",
                    style = MaterialTheme.typography.bodySmall,
                    modifier = Modifier.padding(8.dp)
                )
            }
            if (primarios.isNotBlank()) Text("Primario: $primarios", style = MaterialTheme.typography.bodySmall)
            if (secundarios.isNotBlank()) Text("Secundario: $secundarios", style = MaterialTheme.typography.bodySmall)
        }
    }
}
```

----- FILE: app/src/main/java/com/befitnessapp/ui/screens/addlog/AddWorkoutViewModel.kt -----
```
package com.befitnessapp.ui.screens.addlog

import androidx.lifecycle.ViewModel
import androidx.lifecycle.ViewModelProvider
import androidx.lifecycle.viewModelScope
import com.befitnessapp.data.repository.SetInput
import com.befitnessapp.data.repository.WorkoutRepository
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.launch
import java.time.LocalDate

data class ExerciseEntry(
    val exerciseId: Int,
    val sets: MutableList<Pair<Int, Float>> = mutableListOf() // (reps, weight)
)

class AddWorkoutViewModel(
    private val repo: WorkoutRepository
) : ViewModel() {

    private val _entries = MutableStateFlow<List<ExerciseEntry>>(emptyList())
    val entries: StateFlow<List<ExerciseEntry>> = _entries

    fun addExercise(exerciseId: Int) {
        if (_entries.value.any { it.exerciseId == exerciseId }) return
        _entries.value = _entries.value + ExerciseEntry(exerciseId)
    }

    fun removeExercise(exerciseId: Int) {
        _entries.value = _entries.value.filterNot { it.exerciseId == exerciseId }
    }

    fun addSet(exerciseId: Int, reps: Int = 8, weight: Float = 20f) {
        _entries.value = _entries.value.map {
            if (it.exerciseId == exerciseId) {
                it.sets.add(reps to weight); it
            } else it
        }
    }

    fun updateSet(exerciseId: Int, index: Int, reps: Int, weight: Float) {
        _entries.value = _entries.value.map {
            if (it.exerciseId == exerciseId && index in it.sets.indices) {
                it.sets[index] = reps to weight; it
            } else it
        }
    }

    fun removeSet(exerciseId: Int, index: Int) {
        _entries.value = _entries.value.map {
            if (it.exerciseId == exerciseId && index in it.sets.indices) {
                it.sets.removeAt(index); it
            } else it
        }
    }

    fun saveToday(notes: String?, onDone: () -> Unit, onError: (Throwable) -> Unit) {
        viewModelScope.launch {
            try {
                val map = _entries.value
                    .filter { it.sets.isNotEmpty() }
                    .associate { it.exerciseId to it.sets.toList() }
                repo.createWorkout(LocalDate.now(), notes, map)
                _entries.value = emptyList()
                onDone()
            } catch (t: Throwable) {
                onError(t)
            }
        }
    }

    companion object {
        fun factory(repo: WorkoutRepository) = object : ViewModelProvider.Factory {
            @Suppress("UNCHECKED_CAST")
            override fun <T : ViewModel> create(modelClass: Class<T>): T {
                return AddWorkoutViewModel(repo) as T
            }
        }
    }
}
```

----- FILE: app/src/main/java/com/befitnessapp/ui/screens/auth/LoginScreen.kt -----
```
package com.befitnessapp.ui.screens.auth

import androidx.compose.foundation.layout.*
import androidx.compose.material3.Button
import androidx.compose.material3.OutlinedButton
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp

@Composable
fun LoginScreen(onLoggedIn: () -> Unit, onBack: () -> Unit) {
    Column(Modifier.fillMaxSize().padding(24.dp)) {
        Text("Login (Google Sign-In próximamente)")
        Spacer(Modifier.height(16.dp))
        Button(onClick = onLoggedIn, modifier = Modifier.fillMaxWidth()) { Text("Entrar (mock)") }
        Spacer(Modifier.height(8.dp))
        OutlinedButton(onClick = onBack, modifier = Modifier.fillMaxWidth()) { Text("Volver") }
    }
}
```

----- FILE: app/src/main/java/com/befitnessapp/ui/screens/auth/RegisterScreen.kt -----
```
package com.befitnessapp.ui.screens.auth

import androidx.compose.foundation.layout.*
import androidx.compose.material3.Button
import androidx.compose.material3.OutlinedButton
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp

@Composable
fun RegisterScreen(onRegistered: () -> Unit, onBack: () -> Unit) {
    Column(Modifier.fillMaxSize().padding(24.dp)) {
        Text("Registro (placeholder)")
        Spacer(Modifier.height(16.dp))
        Button(onClick = onRegistered, modifier = Modifier.fillMaxWidth()) { Text("Crear cuenta (mock)") }
        Spacer(Modifier.height(8.dp))
        OutlinedButton(onClick = onBack, modifier = Modifier.fillMaxWidth()) { Text("Volver") }
    }
}
```

----- FILE: app/src/main/java/com/befitnessapp/ui/screens/calendar/CalendarScreen.kt -----
```
package com.befitnessapp.ui.screens.calendar

import androidx.compose.foundation.layout.*
import androidx.compose.material3.OutlinedButton
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp

@Composable
fun CalendarScreen(onBack: () -> Unit) {
    Column(Modifier.fillMaxSize().padding(24.dp), verticalArrangement = Arrangement.spacedBy(12.dp)) {
        Text("Calendario semanal – placeholder")
        // TODO: Vista semanal con marcadores Plan vs Log
        OutlinedButton(onClick = onBack) { Text("Volver") }
    }
}
```

----- FILE: app/src/main/java/com/befitnessapp/ui/screens/dashboard/DashboardScreen.kt -----
```
package com.befitnessapp.ui.screens.dashboard

import androidx.compose.foundation.layout.*
import androidx.compose.material3.OutlinedButton
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp

@Composable
fun DashboardScreen(onBack: () -> Unit) {
    Column(Modifier.fillMaxSize().padding(24.dp)) {
        Text("Dashboard (KPIs y tendencias) – placeholder")
        Spacer(Modifier.height(16.dp))
        OutlinedButton(onClick = onBack) { Text("Volver") }
    }
}
```

----- FILE: app/src/main/java/com/befitnessapp/ui/screens/home/HomeScreen.kt -----
```
package com.befitnessapp.ui.screens.home

import androidx.compose.foundation.layout.*
import androidx.compose.material3.Button
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp

@Composable
fun HomeScreen(
    goDashboard: () -> Unit,
    goLibrary: () -> Unit,
    goMuscleMap: () -> Unit,
    goLog: () -> Unit,
    goAddLog: () -> Unit,
    goRecommendations: () -> Unit,
    goRoutines: () -> Unit,
    goCalendar: () -> Unit,
    goProfile: () -> Unit,
    goSettings: () -> Unit
) {
    Column(Modifier.fillMaxSize().padding(24.dp), verticalArrangement = Arrangement.spacedBy(12.dp)) {
        Text("Home (hub)")
        Button(onClick = goDashboard, modifier = Modifier.fillMaxWidth()) { Text("Dashboard") }
        Button(onClick = goLibrary, modifier = Modifier.fillMaxWidth()) { Text("Biblioteca de ejercicios") }
        Button(onClick = goMuscleMap, modifier = Modifier.fillMaxWidth()) { Text("Mapa muscular") }
        Button(onClick = goLog, modifier = Modifier.fillMaxWidth()) { Text("Historial de entrenos") }
        Button(onClick = goAddLog, modifier = Modifier.fillMaxWidth()) { Text("Agregar entrenamiento") }
        Button(onClick = goRecommendations, modifier = Modifier.fillMaxWidth()) { Text("Recomendaciones") }
        Button(onClick = goRoutines, modifier = Modifier.fillMaxWidth()) { Text("Rutinas") }
        Button(onClick = goCalendar, modifier = Modifier.fillMaxWidth()) { Text("Calendario") }
        Button(onClick = goProfile, modifier = Modifier.fillMaxWidth()) { Text("Perfil") }
        Button(onClick = goSettings, modifier = Modifier.fillMaxWidth()) { Text("Ajustes") }
    }
}
```

----- FILE: app/src/main/java/com/befitnessapp/ui/screens/library/LibraryScreen.kt -----
```
package com.befitnessapp.ui.screens.library

import androidx.compose.foundation.layout.*
import androidx.compose.foundation.layout.FlowRow
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import com.befitnessapp.domain.catalog.Catalogo
import com.befitnessapp.domain.catalog.Exercise
import com.befitnessapp.domain.catalog.MuscleGroup

@Composable
fun LibraryScreen(onBack: () -> Unit) {
    var query by remember { mutableStateOf("") }
    var selectedGroup: MuscleGroup? by remember { mutableStateOf(null) }

    val results by remember(query, selectedGroup) {
        mutableStateOf(
            Catalogo.searchExercises(
                query = query,
                groupId = selectedGroup?.id
            )
        )
    }

    Column(Modifier.fillMaxSize().padding(16.dp)) {
        Text("Biblioteca de ejercicios", style = MaterialTheme.typography.headlineSmall)
        Spacer(Modifier.height(12.dp))

        OutlinedTextField(
            value = query,
            onValueChange = { query = it },
            modifier = Modifier.fillMaxWidth(),
            label = { Text("Buscar ejercicio") }
        )

        Spacer(Modifier.height(8.dp))

        FlowRow(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.spacedBy(8.dp),
            verticalArrangement = Arrangement.spacedBy(8.dp)
        ) {
            AssistChip(
                onClick = { selectedGroup = null },
                label = { Text("Todos") }
            )
            Catalogo.allGroups.forEach { grp ->
                val selected = selectedGroup?.id == grp.id
                AssistChip(
                    onClick = { selectedGroup = if (selected) null else grp },
                    label = { Text(grp.name) },
                    colors = AssistChipDefaults.assistChipColors(
                        containerColor = if (selected)
                            MaterialTheme.colorScheme.primary.copy(alpha = 0.14f)
                        else
                            MaterialTheme.colorScheme.surface
                    )
                )
            }
        }

        Spacer(Modifier.height(12.dp))

        LazyColumn(
            modifier = Modifier.fillMaxSize(),
            verticalArrangement = Arrangement.spacedBy(8.dp)
        ) {
            items(results) { ex ->
                ExerciseCard(ex)
            }
            if (results.isEmpty()) {
                item {
                    Text(
                        text = "No se encontraron ejercicios.",
                        style = MaterialTheme.typography.bodyMedium,
                        modifier = Modifier.padding(8.dp)
                    )
                }
            }
        }

        Spacer(Modifier.height(8.dp))
        OutlinedButton(onClick = onBack, modifier = Modifier.fillMaxWidth()) { Text("Volver") }
    }
}

@Composable
private fun ExerciseCard(ex: Exercise) {
    val primaryTargets = remember(ex) {
        ex.targets.filter { it.role.name == "PRIMARY" }
            .mapNotNull { t -> Catalogo.muscleById[t.muscleId]?.name }
            .joinToString(" · ")
    }
    Card {
        Column(Modifier.fillMaxWidth().padding(12.dp)) {
            Text(ex.name, style = MaterialTheme.typography.titleMedium)
            Spacer(Modifier.height(4.dp))
            Text("Patrón: ${ex.pattern}", style = MaterialTheme.typography.bodySmall)
            if (primaryTargets.isNotBlank()) {
                Text("Primario: $primaryTargets", style = MaterialTheme.typography.bodySmall)
            }
        }
    }
}
```

----- FILE: app/src/main/java/com/befitnessapp/ui/screens/log/WorkoutLogScreen.kt -----
```
package com.befitnessapp.ui.screens.log

import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.lifecycle.viewmodel.compose.viewModel
import com.befitnessapp.Graph
import com.befitnessapp.domain.catalog.Catalogo
import java.time.format.DateTimeFormatter

@Composable
fun WorkoutLogScreen(onBack: () -> Unit) {
    val vm: WorkoutLogViewModel =
        viewModel(factory = WorkoutLogViewModel.factory(Graph.workoutRepository))

    val items by vm.recent.collectAsState()
    val fmt = remember { DateTimeFormatter.ofPattern("yyyy-MM-dd") }

    Column(Modifier.fillMaxSize().padding(16.dp)) {
        Text("Historial de entrenos", style = MaterialTheme.typography.headlineSmall)
        Spacer(Modifier.height(12.dp))

        if (items.isEmpty()) {
            Text(
                "Aún no registras entrenos. ¡Empieza en “Agregar entrenamiento”!",
                style = MaterialTheme.typography.bodyMedium
            )
        } else {
            LazyColumn(
                modifier = Modifier.fillMaxSize(),
                verticalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                items(items) { w ->
                    Card {
                        Column(
                            Modifier.fillMaxWidth().padding(12.dp),
                            verticalArrangement = Arrangement.spacedBy(6.dp)
                        ) {
                            Text("Fecha: ${w.workout.date.format(fmt)}", style = MaterialTheme.typography.titleMedium)
                            if (!w.workout.notes.isNullOrBlank()) {
                                Text("Notas: ${w.workout.notes}", style = MaterialTheme.typography.bodySmall)
                            }
                            w.sets
                                .groupBy { it.exerciseId }
                                .forEach { (exId, list) ->
                                    val name = Catalogo.allExercises.firstOrNull { it.id == exId }?.name
                                        ?: "Ejercicio $exId"
                                    Text(name, style = MaterialTheme.typography.bodyMedium)
                                    list.sortedBy { it.setIndex }.forEach { s ->
                                        Text("• ${s.reps} reps @ ${s.weight}")
                                    }
                                }
                        }
                    }
                }
            }
        }

        Spacer(Modifier.height(8.dp))
        OutlinedButton(onClick = onBack, modifier = Modifier.fillMaxWidth()) { Text("Volver") }
    }
}
```

----- FILE: app/src/main/java/com/befitnessapp/ui/screens/log/WorkoutLogViewModel.kt -----
```
package com.befitnessapp.ui.screens.log

import androidx.lifecycle.ViewModel
import androidx.lifecycle.ViewModelProvider
import androidx.lifecycle.viewModelScope
import com.befitnessapp.data.local.dao.WorkoutWithSets
import com.befitnessapp.data.repository.WorkoutRepository
import kotlinx.coroutines.flow.SharingStarted
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.stateIn

class WorkoutLogViewModel(repo: WorkoutRepository) : ViewModel() {
    val recent: StateFlow<List<WorkoutWithSets>> =
        repo.observeRecent(50).stateIn(viewModelScope, SharingStarted.WhileSubscribed(5000), emptyList())

    companion object {
        fun factory(repo: WorkoutRepository) = object : ViewModelProvider.Factory {
            @Suppress("UNCHECKED_CAST")
            override fun <T : ViewModel> create(modelClass: Class<T>): T {
                return WorkoutLogViewModel(repo) as T
            }
        }
    }
}
```

----- FILE: app/src/main/java/com/befitnessapp/ui/screens/musclemap/MuscleMapScreen.kt -----
```
package com.befitnessapp.ui.screens.musclemap

import androidx.compose.foundation.layout.*
import androidx.compose.material3.OutlinedButton
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp

@Composable
fun MuscleMapScreen(onBack: () -> Unit) {
    Column(Modifier.fillMaxSize().padding(24.dp), verticalArrangement = Arrangement.spacedBy(12.dp)) {
        Text("Mapa muscular (SVG) – placeholder")
        // TODO: Render del SVG frontal/dorsal
        OutlinedButton(onClick = onBack) { Text("Volver") }
    }
}
```

----- FILE: app/src/main/java/com/befitnessapp/ui/screens/onboarding/OnboardingScreen.kt -----
```
package com.befitnessapp.ui.screens.onboarding

import androidx.compose.foundation.layout.*
import androidx.compose.foundation.pager.HorizontalPager
import androidx.compose.foundation.pager.rememberPagerState
import androidx.compose.material3.Button
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.OutlinedButton
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.remember
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import com.befitnessapp.ui.components.DotsIndicator

@Composable
fun OnboardingScreen(
    onTryDemo: () -> Unit,
    onLogin: () -> Unit,
    onRegister: () -> Unit
) {
    // 5 mensajes + 1 slide final de acciones
    val messages = remember {
        listOf(
            "BeFitness",
            "Loggea tus workouts",
            "Aprende técnica con previews",
            "Equilibra tus músculos",
            "Recibe rutinas y sugerencias"
        )
    }
    val totalPages = messages.size + 1 // +1 para la página de CTAs

    val pagerState = rememberPagerState(pageCount = { totalPages })

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(horizontal = 24.dp, vertical = 16.dp),
        verticalArrangement = Arrangement.SpaceBetween
    ) {
        // Contenido deslizable
        Box(
            modifier = Modifier
                .fillMaxWidth()
                .weight(1f),
            contentAlignment = Alignment.Center
        ) {
            HorizontalPager(
                state = pagerState,
                modifier = Modifier.fillMaxSize()
            ) { page ->
                if (page < messages.size) {
                    // Slides de texto
                    Text(
                        text = messages[page],
                        style = MaterialTheme.typography.headlineMedium,
                        textAlign = TextAlign.Center,
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(horizontal = 8.dp)
                    )
                } else {
                    // Slide final (CTAs)
                    Column(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(bottom = 8.dp),
                        horizontalAlignment = Alignment.CenterHorizontally
                    ) {
                        Text(
                            text = "¡Empecemos!",
                            style = MaterialTheme.typography.headlineMedium,
                            textAlign = TextAlign.Center,
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(bottom = 12.dp)
                        )
                        Button(onClick = onTryDemo, modifier = Modifier.fillMaxWidth()) {
                            Text("Probar demo")
                        }
                        Spacer(Modifier.height(8.dp))
                        OutlinedButton(onClick = onLogin, modifier = Modifier.fillMaxWidth()) {
                            Text("Entrar con Google")
                        }
                        Spacer(Modifier.height(8.dp))
                        OutlinedButton(onClick = onRegister, modifier = Modifier.fillMaxWidth()) {
                            Text("Crear cuenta")
                        }
                    }
                }
            }
        }

        // Indicadores de página (elegantes, al fondo con padding)
        DotsIndicator(
            totalDots = totalPages,
            selectedIndex = pagerState.currentPage,
            modifier = Modifier
                .fillMaxWidth()
                .padding(bottom = 24.dp) // “no tan” abajo, con margen
        )
    }
}
```

----- FILE: app/src/main/java/com/befitnessapp/ui/screens/profile/ProfileScreen.kt -----
```
package com.befitnessapp.ui.screens.profile

import androidx.compose.foundation.layout.*
import androidx.compose.material3.OutlinedButton
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp

@Composable
fun ProfileScreen(onBack: () -> Unit) {
    Column(Modifier.fillMaxSize().padding(24.dp), verticalArrangement = Arrangement.spacedBy(12.dp)) {
        Text("Perfil – placeholder")
        // TODO: objetivo, días/semana, kg/lb, equipo disponible
        OutlinedButton(onClick = onBack) { Text("Volver") }
    }
}
```

----- FILE: app/src/main/java/com/befitnessapp/ui/screens/recommendations/RecommendationsScreen.kt -----
```
package com.befitnessapp.ui.screens.recommendations

import androidx.compose.foundation.layout.*
import androidx.compose.material3.OutlinedButton
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp

@Composable
fun RecommendationsScreen(onBack: () -> Unit) {
    Column(Modifier.fillMaxSize().padding(24.dp), verticalArrangement = Arrangement.spacedBy(12.dp)) {
        Text("Recomendaciones – placeholder")
        // TODO: Arriba Routine Builder (plantilla/objetivo/días) + abajo ejercicios sugeridos
        OutlinedButton(onClick = onBack) { Text("Volver") }
    }
}
```

----- FILE: app/src/main/java/com/befitnessapp/ui/screens/routines/RoutinesScreen.kt -----
```
package com.befitnessapp.ui.screens.routines

import androidx.compose.foundation.layout.*
import androidx.compose.material3.OutlinedButton
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp

@Composable
fun RoutinesScreen(onBack: () -> Unit) {
    Column(Modifier.fillMaxSize().padding(24.dp), verticalArrangement = Arrangement.spacedBy(12.dp)) {
        Text("Rutinas – placeholder")
        // TODO: Builder/Preview/Mis Rutinas
        OutlinedButton(onClick = onBack) { Text("Volver") }
    }
}
```

----- FILE: app/src/main/java/com/befitnessapp/ui/screens/settings/SettingsScreen.kt -----
```
package com.befitnessapp.ui.screens.settings

import androidx.compose.foundation.layout.*
import androidx.compose.material3.OutlinedButton
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp

@Composable
fun SettingsScreen(onBack: () -> Unit) {
    Column(Modifier.fillMaxSize().padding(24.dp), verticalArrangement = Arrangement.spacedBy(12.dp)) {
        Text("Ajustes – placeholder")
        // TODO: tema claro/oscuro/sistema, idioma, logout
        OutlinedButton(onClick = onBack) { Text("Volver") }
    }
}
```

----- FILE: app/src/main/java/com/befitnessapp/ui/theme/Color.kt -----
```
package com.befitnessapp.ui.theme

import androidx.compose.ui.graphics.Color

val md_theme_primary = Color(0xFF0061A4)
val md_theme_onPrimary = Color(0xFFFFFFFF)
val md_theme_background = Color(0xFFFDFDFE)
val md_theme_onBackground = Color(0xFF1B1B1F)
```

----- FILE: app/src/main/java/com/befitnessapp/ui/theme/Theme.kt -----
```
package com.befitnessapp.ui.theme

import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.darkColorScheme
import androidx.compose.material3.lightColorScheme
import androidx.compose.runtime.Composable

private val LightColors = lightColorScheme(
    primary = md_theme_primary,
    onPrimary = md_theme_onPrimary,
    background = md_theme_background,
    onBackground = md_theme_onBackground
)

private val DarkColors = darkColorScheme()

@Composable
fun BeFitnessTheme(
    darkTheme: Boolean = false, // luego: seguir el sistema
    content: @Composable () -> Unit
) {
    MaterialTheme(
        colorScheme = if (darkTheme) DarkColors else LightColors,
        typography = AppTypography,
        content = content
    )
}
```

----- FILE: app/src/main/java/com/befitnessapp/ui/theme/Type.kt -----
```
package com.befitnessapp.ui.theme

import androidx.compose.material3.Typography

val AppTypography = Typography()
```

----- FILE: app/src/main/java/firebase/README.md -----
```
```

----- FILE: app/src/main/java/firebase/google-services.json -----
```
```

----- FILE: app/src/main/res/drawable/ic_launcher_background.xml -----
```
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">
    <path
        android:fillColor="#3DDC84"
        android:pathData="M0,0h108v108h-108z" />
    <path
        android:fillColor="#00000000"
        android:pathData="M9,0L9,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,0L19,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M29,0L29,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M39,0L39,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M49,0L49,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M59,0L59,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M69,0L69,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M79,0L79,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M89,0L89,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M99,0L99,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,9L108,9"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,19L108,19"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,29L108,29"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,39L108,39"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,49L108,49"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,59L108,59"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,69L108,69"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,79L108,79"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,89L108,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,99L108,99"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,29L89,29"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,39L89,39"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,49L89,49"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,59L89,59"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,69L89,69"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,79L89,79"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M29,19L29,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M39,19L39,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M49,19L49,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M59,19L59,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M69,19L69,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M79,19L79,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
</vector>
```

----- FILE: app/src/main/res/drawable/ic_launcher_foreground.xml -----
```
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:aapt="http://schemas.android.com/aapt"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">
    <path android:pathData="M31,63.928c0,0 6.4,-11 12.1,-13.1c7.2,-2.6 26,-1.4 26,-1.4l38.1,38.1L107,108.928l-32,-1L31,63.928z">
        <aapt:attr name="android:fillColor">
            <gradient
                android:endX="85.84757"
                android:endY="92.4963"
                android:startX="42.9492"
                android:startY="49.59793"
                android:type="linear">
                <item
                    android:color="#44000000"
                    android:offset="0.0" />
                <item
                    android:color="#00000000"
                    android:offset="1.0" />
            </gradient>
        </aapt:attr>
    </path>
    <path
        android:fillColor="#FFFFFF"
        android:fillType="nonZero"
        android:pathData="M65.3,45.828l3.8,-6.6c0.2,-0.4 0.1,-0.9 -0.3,-1.1c-0.4,-0.2 -0.9,-0.1 -1.1,0.3l-3.9,6.7c-6.3,-2.8 -13.4,-2.8 -19.7,0l-3.9,-6.7c-0.2,-0.4 -0.7,-0.5 -1.1,-0.3C38.8,38.328 38.7,38.828 38.9,39.228l3.8,6.6C36.2,49.428 31.7,56.028 31,63.928h46C76.3,56.028 71.8,49.428 65.3,45.828zM43.4,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2c-0.3,-0.7 -0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C45.3,56.528 44.5,57.328 43.4,57.328L43.4,57.328zM64.6,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2s-0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C66.5,56.528 65.6,57.328 64.6,57.328L64.6,57.328z"
        android:strokeWidth="1"
        android:strokeColor="#00000000" />
</vector>```

----- FILE: app/src/main/res/mipmap-anydpi/ic_launcher.xml -----
```
<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background" />
    <foreground android:drawable="@drawable/ic_launcher_foreground" />
    <monochrome android:drawable="@drawable/ic_launcher_foreground" />
</adaptive-icon>```

----- FILE: app/src/main/res/mipmap-anydpi/ic_launcher_round.xml -----
```
<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background" />
    <foreground android:drawable="@drawable/ic_launcher_foreground" />
    <monochrome android:drawable="@drawable/ic_launcher_foreground" />
</adaptive-icon>```

----- FILE: app/src/main/res/values/colors.xml -----
```
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <color name="purple_200">#FFBB86FC</color>
    <color name="purple_500">#FF6200EE</color>
    <color name="purple_700">#FF3700B3</color>
    <color name="teal_200">#FF03DAC5</color>
    <color name="teal_700">#FF018786</color>
    <color name="black">#FF000000</color>
    <color name="white">#FFFFFFFF</color>
</resources>```

----- FILE: app/src/main/res/values/strings.xml -----
```
<resources>
    <string name="app_name">BeFitnessApp</string>
</resources>```

----- FILE: app/src/main/res/values/themes.xml -----
```
<?xml version="1.0" encoding="utf-8"?>
<resources>

    <style name="Theme.BeFitnessApp" parent="android:Theme.Material.Light.NoActionBar" />
</resources>```

----- FILE: app/src/main/res/xml/backup_rules.xml -----
```
<?xml version="1.0" encoding="utf-8"?><!--
   Sample backup rules file; uncomment and customize as necessary.
   See https://developer.android.com/guide/topics/data/autobackup
   for details.
   Note: This file is ignored for devices older than API 31
   See https://developer.android.com/about/versions/12/backup-restore
-->
<full-backup-content>
    <!--
   <include domain="sharedpref" path="."/>
   <exclude domain="sharedpref" path="device.xml"/>
-->
</full-backup-content>```

----- FILE: app/src/main/res/xml/data_extraction_rules.xml -----
```
<?xml version="1.0" encoding="utf-8"?><!--
   Sample data extraction rules file; uncomment and customize as necessary.
   See https://developer.android.com/about/versions/12/backup-restore#xml-changes
   for details.
-->
<data-extraction-rules>
    <cloud-backup>
        <!-- TODO: Use <include> and <exclude> to control what is backed up.
        <include .../>
        <exclude .../>
        -->
    </cloud-backup>
    <!--
    <device-transfer>
        <include .../>
        <exclude .../>
    </device-transfer>
    -->
</data-extraction-rules>```

----- FILE: app/src/test/java/com/befitnessapp/ExampleUnitTest.kt -----
```
package com.befitnessapp

import org.junit.Test

import org.junit.Assert.*

/**
 * Example local unit test, which will execute on the development machine (host).
 *
 * See [testing documentation](http://d.android.com/tools/testing).
 */
class ExampleUnitTest {
    @Test
    fun addition_isCorrect() {
        assertEquals(4, 2 + 2)
    }
}```

----- FILE: build.gradle.kts -----
```
plugins {
    alias(libs.plugins.android.application) apply false
    alias(libs.plugins.kotlin.android) apply false
    alias(libs.plugins.kotlin.compose) apply false
    alias(libs.plugins.kotlin.kapt) apply false
    alias(libs.plugins.google.services) apply false
}
```

----- FILE: gradle.properties -----
```

org.gradle.jvmargs=-Xmx4g -Dfile.encoding=UTF-8 -XX:MaxMetaspaceSize=1g -XX:+UseParallelGC
kotlin.daemon.jvmargs=-Xmx2g -Dfile.encoding=UTF-8
org.gradle.daemon=true
org.gradle.parallel=true
org.gradle.configureondemand=true
android.useAndroidX=true
android.nonTransitiveRClass=true
kotlin.code.style=official

```

----- FILE: gradle/libs.versions.toml -----
```
[versions]
agp = "8.11.2"
kotlin = "2.0.21"
room = "2.8.1"

coreKtx = "1.17.0"
junit = "4.13.2"
junitVersion = "1.3.0"
espressoCore = "3.7.0"
lifecycleRuntimeKtx = "2.9.4"
activityCompose = "1.11.0"
composeBom = "2024.09.00"
navigation = "2.7.7"
datastore = "1.1.1"
work = "2.9.0"
coroutines = "1.8.1"
firebaseBom = "33.5.1"
playServicesAuth = "21.2.0"

[libraries]
androidx-room-runtime = { group = "androidx.room", name = "room-runtime", version.ref = "room" }
androidx-room-ktx = { group = "androidx.room", name = "room-ktx", version.ref = "room" }
androidx-room-compiler = { group = "androidx.room", name = "room-compiler", version.ref = "room" }


androidx-core-ktx = { group = "androidx.core", name = "core-ktx", version.ref = "coreKtx" }
junit = { group = "junit", name = "junit", version.ref = "junit" }
androidx-junit = { group = "androidx.test.ext", name = "junit", version.ref = "junitVersion" }
androidx-espresso-core = { group = "androidx.test.espresso", name = "espresso-core", version.ref = "espressoCore" }
androidx-ui-text = { group = "androidx.compose.ui", name = "ui-text" }
androidx-lifecycle-runtime-ktx = { group = "androidx.lifecycle", name = "lifecycle-runtime-ktx", version.ref = "lifecycleRuntimeKtx" }
androidx-activity-compose = { group = "androidx.activity", name = "activity-compose", version.ref = "activityCompose" }
androidx-compose-bom = { group = "androidx.compose", name = "compose-bom", version.ref = "composeBom" }
androidx-ui = { group = "androidx.compose.ui", name = "ui" }
androidx-ui-graphics = { group = "androidx.compose.ui", name = "ui-graphics" }
androidx-ui-tooling = { group = "androidx.compose.ui", name = "ui-tooling" }
androidx-ui-tooling-preview = { group = "androidx.compose.ui", name = "ui-tooling-preview" }
androidx-ui-test-manifest = { group = "androidx.compose.ui", name = "ui-test-manifest" }
androidx-ui-test-junit4 = { group = "androidx.compose.ui", name = "ui-test-junit4" }
androidx-material3 = { group = "androidx.compose.material3", name = "material3" }

# NUEVO
androidx-navigation-compose = { group = "androidx.navigation", name = "navigation-compose", version.ref = "navigation" }
androidx-datastore-preferences = { group = "androidx.datastore", name = "datastore-preferences", version.ref = "datastore" }
androidx-foundation = { group = "androidx.compose.foundation", name = "foundation" }

androidx-work-runtime-ktx = { group = "androidx.work", name = "work-runtime-ktx", version.ref = "work" }
kotlinx-coroutines-android = { group = "org.jetbrains.kotlinx", name = "kotlinx-coroutines-android", version.ref = "coroutines" }

firebase-bom = { group = "com.google.firebase", name = "firebase-bom", version.ref = "firebaseBom" }
firebase-auth = { group = "com.google.firebase", name = "firebase-auth" }
firebase-firestore = { group = "com.google.firebase", name = "firebase-firestore" }
play-services-auth = { group = "com.google.android.gms", name = "play-services-auth", version.ref = "playServicesAuth" }

[plugins]
android-application = { id = "com.android.application", version.ref = "agp" }
kotlin-android = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }
kotlin-compose = { id = "org.jetbrains.kotlin.plugin.compose", version.ref = "kotlin" }
# NUEVO
kotlin-kapt = { id = "org.jetbrains.kotlin.kapt", version.ref = "kotlin" }
google-services = { id = "com.google.gms.google-services", version = "4.4.2" }
```

----- FILE: gradle/wrapper/gradle-wrapper.properties -----
```
#Wed Sep 24 16:27:04 CST 2025
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-8.13-bin.zip
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists
```

----- FILE: local.properties -----
```
## This file is automatically generated by Android Studio.
# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
#
# This file should *NOT* be checked into Version Control Systems,
# as it contains information specific to your local configuration.
#
# Location of the SDK. This is only used by Gradle.
# For customization when using a Version Control System, please read the
# header note.
sdk.dir=/Users/javi/Library/Android/sdk```

----- FILE: settings.gradle.kts -----
```
pluginManagement {
    repositories {
        google {
            content {
                includeGroupByRegex("com\\.android.*")
                includeGroupByRegex("com\\.google.*")
                includeGroupByRegex("androidx.*")
            }
        }
        mavenCentral()
        gradlePluginPortal()
    }
}
dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
    repositories {
        google()
        mavenCentral()
    }
}

rootProject.name = "BeFitnessApp"
include(":app")
```
